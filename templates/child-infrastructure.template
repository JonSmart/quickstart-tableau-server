AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates the minimum infrasture needed to run Tableau Server in AWS
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'AWS Configuration'
        Parameters:
          - Route53HostedZone
          - Route53DomainName
          - TableauServerSubdomain
          - TsmSubdomain
          - S3BucketName
    ParameterLabels:
      Route53HostedZone:
        default: Hosted Zone
      Route53DomainName:
        default: Domain name for your hosted zone
      TableauServerSubdomain:
        default: Subdomain for Tableau Server's URL
      TsmSubdomain:
        default: Subdomain for TSM UI's URL
      S3BucketName:
        default: Name of S3 bucket for Tableau Server files
Parameters:
  Route53HostedZone:
    Description: Hosted Zone from Route53
    Type: AWS::Route53::HostedZone::Id
  Route53DomainName:
    Description: Domain name for your Route53 Hosted Zone
    Type: String
  S3BucketName:
    Description: S3 bucket to Tableau Server files
    Type: String
  TableauServerSubdomain:
    Description: Subdomain for Tableau Server URL
    Type: String
  TsmSubdomain:
    Description: Subdomain for TSM UI URL
    Type: String
Mappings: 
  VPC:
    props:
      CidrBlock: 10.0.0.0/16
  Subnets:
    a:
      CidrBlock: 10.0.1.0/24
    b:
      CidrBlock: 10.0.2.0/24
  SecurityGroup:
    props:
      name: Tableau Security Group
      desc: Security Group for Tableau Server
  IAM:
    names:
      role: tableau-server-ec2-iam-role
      profile: tableau-server-ec2-iam-profile
  ALB:
    names:
      TableauServer: Tableau-Server
      Tsm: Tableau-TSM 
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap ["VPC", "props", "CidrBlock"]
      InstanceTenancy: dedicated
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PublicSubnetRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ["Subnets", "a", "CidrBlock"]
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tags:
        - Key: Name
          Value: Public subnet a
      MapPublicIpOnLaunch: true
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetA'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ["Subnets", "b", "CidrBlock"]
      AvailabilityZone: !Sub '${AWS::Region}b'
      Tags:
        - Key: Name
          Value: Public subnet b
      MapPublicIpOnLaunch: true
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetB'
      RouteTableId: !Ref 'PublicSubnetRouteTable'
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
        GroupName: !FindInMap ["SecurityGroup", "props", "name"]
        GroupDescription: !FindInMap ["SecurityGroup", "props", "desc"]
        SecurityGroupEgress: 
            - CidrIp: "0.0.0.0/0"
              IpProtocol: "-1"
        SecurityGroupIngress: 
            - CidrIp: "0.0.0.0/0"
              FromPort: "80"
              ToPort: "80"
              IpProtocol: "tcp"
            - CidrIp: "0.0.0.0/0"
              FromPort: "443"
              ToPort: "443"
              IpProtocol: "tcp"
        Tags: 
          - Key: Name
            Value: !FindInMap ["SecurityGroup", "props", "name"]
        VpcId: !Ref VPC
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
  TableauIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !FindInMap ["IAM", "names", "role"]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMDirectoryServiceAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
              Resource:
                - !Sub 'arn:aws:s3:::${S3BucketName}'
                - !Sub 'arn:aws:s3:::${S3BucketName}/*'
              Effect: Allow
        PolicyName: back-to-s3
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: ec2:CreateTags
              Effect: Allow
              Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
        PolicyName: ec2-tagging
      - PolicyDocument:
          Version: '2012-10-17'  
          Statement:
            - Action: elasticloadbalancing:DescribeTargetHealth
              Effect: Allow
              Resource: '*'
        PolicyName: elb-query-targets
      - PolicyDocument:
          Version: '2012-10-17'  
          Statement:
            - Action: 
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
              Effect: Allow
              Resource:
              - Fn::Sub:
                - 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${tgName}*/*'
                - tgName: !FindInMap ["ALB", "names", "TableauServer"]
              - Fn::Sub:
                - 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${tgName}*/*'
                - tgName: !FindInMap ["ALB", "names", "Tsm"]
        PolicyName: elb-register-targets
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: ec2:StopInstances
              Effect: Allow
              Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
        PolicyName: ec2-stop
  TableauServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !FindInMap ["IAM", "names", "profile"]
      Path: /
      Roles:
        - !Ref 'TableauIAMRole'
  SslCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Route53DomainName
      SubjectAlternativeNames: 
        - !Sub '*.${Route53DomainName}'
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref Route53DomainName
          HostedZoneId: !Ref Route53HostedZone
  TableauServerRoute53:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt TableauServerAlb.CanonicalHostedZoneID
        DNSName: !GetAtt TableauServerAlb.DNSName
      HostedZoneId: !Ref Route53HostedZone
      Name: 
        Fn::Sub:
          - "${p1}.${Route53DomainName}"
          - p1: !Ref TableauServerSubdomain
  TableauServerAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
        Scheme: "internet-facing"
        Type: "application"
        Name: 
          Fn::Sub:
          - "${p1}-LB"
          - p1: !FindInMap ["ALB", "names", "TableauServer"]
        SecurityGroups: 
            - !Ref SecurityGroup
        Subnets: 
            - !Ref PublicSubnetA
            - !Ref PublicSubnetB
  TableauServerTG:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
        Port: 80
        Protocol: "HTTP"
        TargetType: "instance"
        VpcId: !Ref VPC
        Name: 
          Fn::Sub:
          - "${p1}-TG"
          - p1: !FindInMap ["ALB", "names", "TableauServer"]
        TargetGroupAttributes: 
            - Key: "stickiness.enabled"
              Value: "true"
            - Key: "stickiness.type"
              Value: "lb_cookie"
  TableauServerListenerHttps:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        LoadBalancerArn: !Ref TableauServerAlb
        Port: 443
        Protocol: "HTTPS"
        SslPolicy: "ELBSecurityPolicy-2016-08"
        Certificates: 
          - CertificateArn: !Ref SslCertificate
        DefaultActions: 
          - Order: 1
            TargetGroupArn: !Ref TableauServerTG
            Type: "forward"
  TableauServerListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TableauServerAlb
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref 'TableauServerAlb'
      Port: 80
      Protocol: HTTP
  TsmRoute53:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt TsmAlb.CanonicalHostedZoneID
        DNSName: !GetAtt TsmAlb.DNSName
      HostedZoneId: !Ref Route53HostedZone
      Name: 
        Fn::Sub:
          - "${p1}.${Route53DomainName}"
          - p1: !Ref TsmSubdomain
  TsmAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
        Scheme: "internet-facing"
        Type: "application"
        Name: 
          Fn::Sub:
          - "${p1}-LB"
          - p1: !FindInMap ["ALB", "names", "Tsm"]
        SecurityGroups: 
            - !Ref SecurityGroup
        Subnets: 
            - !Ref PublicSubnetA
            - !Ref PublicSubnetB
  TsmTG:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
        Port: 8850
        Protocol: "HTTPS"
        TargetType: "instance"
        VpcId: !Ref VPC
        Name: 
          Fn::Sub:
          - "${p1}-TG"
          - p1: !FindInMap ["ALB", "names", "Tsm"]
        TargetGroupAttributes: 
            - Key: "stickiness.enabled"
              Value: "true"
            - Key: "stickiness.type"
              Value: "lb_cookie"
  TsmListenerHttps:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
        LoadBalancerArn: !Ref TsmAlb
        Port: 443
        Protocol: "HTTPS"
        SslPolicy: "ELBSecurityPolicy-2016-08"
        Certificates: 
          - CertificateArn: !Ref SslCertificate
        DefaultActions: 
          - Order: 1
            TargetGroupArn: !Ref TsmTG
            Type: "forward"
  TsmListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TsmAlb
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref 'TsmAlb'
      Port: 80
      Protocol: HTTP
Outputs:
  TableauServerUrl:
    Description: URL of your Tableau Server
    Value: 
      Fn::Sub:
        - "${p1}.${Route53DomainName}"
        - p1: !Ref TableauServerSubdomain
  SecurityGroup:
    Description: Security Group ARN
    Value: !Ref SecurityGroup
  IamInstanceProfile:
    Description: IAM Instance Profile
    Value: !FindInMap ["IAM", "names", "profile"]
  PublicSubnetId:
    Description: Subnet ID
    Value: !Ref PublicSubnetA
  TableauServerTargetGroupArn:
    Description: Tableau Server ALB TG
    Value: !Ref TableauServerTG
  TsmTargetGroupArn:
    Description: TSM UI ALB TG
    Value: !Ref TsmTG
  